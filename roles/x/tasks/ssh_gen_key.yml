---

- name: Function gen_ssh_key
  vars:
    o_user  : "{{ x_user      | d(common_user) }}"  # Пользователь для которого генерируются ключи
    o_key   : "{{ x_key       | d('ansible')}}"     # Идентификатор (часть имени файла) ключа
    o_force : "{{ x_force     | d(key_update) | d(false) }}"        # Принудительное обновление ключей
    o_type  : "{{ x_type      | d('ed25519') }}"    # Тип ключа
    o_copyto: "{{ x_copyto    | d(omit) }}"         # user@host - Куда скопировать pub key
    o_copyto_port: "{{ x_copyto_port | d(22) }}"

  block:
    - name: gen_ssh_key {{ o_key }} | Get userinfo from passwd for user {{ o_user }}
      ansible.builtin.getent:
        database: passwd
        key     : "{{ o_user }}"
        split   : ":"

    - name: gen_ssh_key {{ o_key }} | Set variable o_userinfo
      ansible.builtin.set_fact:
        o_userinfo:
          uid     : "{{ getent_passwd[o_user][1] }}"
          gid     : "{{ getent_passwd[o_user][2] }}"
          homedir : "{{ getent_passwd[o_user][4] }}"
          shell   : "{{ getent_passwd[o_user][5] }}"

    - name: gen_ssh_key {{ o_key }} | Check .ssh folder exists
      ansible.builtin.file:
        path: "{{ o_userinfo.homedir }}/.ssh"
        state: directory
        owner: "{{ o_userinfo.uid }}"
        group: "{{ o_userinfo.gid }}"
        mode: "0700"

    - name: gen_ssh_key {{ o_key }} | Check ssh key id_{{ o_key }} exists
      ansible.builtin.stat:
        path: "{{ o_userinfo.homedir }}/id_{{ o_key }}.pub"
      register: res_check_key

    - name: gen_ssh_key {{ o_key }} | Force update key
      when: o_force and res_check_key.stat.exists
      become: true
      become_user: "{{ o_user }}"
      block:
        - name: gen_ssh_key {{ o_key }} | Read current id_key.pub
          ansible.builtin.slurp:
            src: "{{ o_userinfo.homedir }}/.ssh/id_{{ o_key }}.pub"
          register: pub_key_content

        - name: gen_ssh_key {{ o_key }} | Append id_key.pub to id_key.pub.old
          when: pub_key_content.content is defined
          ansible.builtin.lineinfile:
            path: "{{ o_userinfo.homedir }}/.ssh/id_{{ o_key }}.pub.old"
            line: "{{ item }}"
            create: yes
            mode: "0644"
            insertafter: EOF
          with_items: "{{ (pub_key_content.content | b64decode).splitlines() }}"

        - name: gen_ssh_key {{ o_key }} | Remove old keys (public)
          ansible.builtin.file:
            path: "{{ o_userinfo.homedir }}/.ssh/id_{{ o_key }}.pub"
            state: absent

        - name: gen_ssh_key {{ o_key }} | Remove old keys (private)
          ansible.builtin.file:
            path: "{{ o_userinfo.homedir }}/.ssh/id_{{ o_key }}"
            state: absent

    - name: gen_ssh_key {{ o_key }} | Check old keys exists
      when: o_copyto is defined
      ansible.builtin.stat:
        path: "{{ o_userinfo.homedir }}/.ssh/id_{{ o_key }}.pub.old"
      register: x_old_key_file

    - name: gen_ssh_key {{ o_key }} | Remove keys from remote server
      when:
        - o_copyto is defined
        - o_copyto != omit
        - x_old_key_file.stat.exists
      block:

        - name: gen_ssh_key {{ o_key }} | Read all keys from id_key.pub.old
          ansible.builtin.slurp:
            src: "{{ o_userinfo.homedir }}/.ssh/id_{{ o_key }}.pub.old"
          register: x_old_keys_content

        - name: gen_ssh_key {{ o_key }} | Remove each key on {{ o_copyto }}
          delegate_to: "{{ o_copyto.split('@')[1] }}"
          ansible.posix.authorized_key:
            user  : "{{ o_copyto.split('@')[0] }}"
            key   : "{{ x_old_key_item }}"
            state : absent
          loop: "{{ (x_old_keys_content.content | b64decode).splitlines() }}"
          loop_control:
            loop_var: x_old_key_item

    - name: gen_ssh_key {{ o_key }} | Generate SSH key for {{ o_key }}
      become: true
      become_user: "{{ o_user }}"
      ansible.builtin.command: |
        ssh-keygen -t {{ o_type }} -f "{{ o_userinfo.homedir }}/.ssh/id_{{ o_key }}" -N '' -C '{{ o_user }}@{{ inventory_hostname }}'
      args:
        creates: "{{ o_userinfo.homedir }}/.ssh/id_{{ o_key }}"
      register: res_gen_key

    - name: Result of keygen
      ansible.builtin.debug:
        var: res_gen_key
        verbosity: 1

    - name: gen_ssh_key {{ o_key }} | Get public key content
      ansible.builtin.slurp:
        src: "{{ o_userinfo.homedir }}/.ssh/id_{{ o_key }}.pub"
      register: x_ssh_key_public

    - name: gen_ssh_key {{ o_key }} | Copy auth key to remote serve
      when: o_copyto is defined
      delegate_to: "{{ ssh_proxy_item.value.sshd.split('@')[1] }}"
      ansible.posix.authorized_key:
        user: "{{ ssh_proxy_item.value.sshd.split('@')[0] }}"
        key : "{{ x_ssh_key_public.content | b64decode }}"
        state: present

    - name: gen_ssh_key {{ o_key }} | Set output variable
      ansible.builtin.set_fact:
        ssh_gen_key:
          changed : "{{ res_gen_key.changed }}"
          public  : "{{ x_ssh_key_public.content | b64decode }}"